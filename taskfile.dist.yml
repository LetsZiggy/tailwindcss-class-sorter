version: '3'

silent: true

vars:
  CONFIG_BASE64: 'WwoJewoJCSJpbmRleCI6IDAsCgkJImdyb3VwX25hbWUiOiAic3IiLAoJCSJyZWdleCI6IFsKCQkJInNyLW9ubHkiLAoJCQkibm90LXNyLW9ubHkiCgkJXQoJfSwKCXsKCQkiaW5kZXgiOiAxLAoJCSJncm91cF9uYW1lIjogImluc2V0IiwKCQkicmVnZXgiOiBbCgkJCSJpbnNldC1hdXRvIiwKCQkJImluc2V0LXgtYXV0byIsCgkJCSJpbnNldC15LWF1dG8iLAoJCQkiLXswLDF9aW5zZXQtZnVsbCIsCgkJCSItezAsMX1pbnNldC1weCIsCgkJCSItezAsMX1pbnNldC14LWZ1bGwiLAoJCQkiLXswLDF9aW5zZXQteC1weCIsCgkJCSItezAsMX1pbnNldC15LWZ1bGwiLAoJCQkiLXswLDF9aW5zZXQteS1weCIKCQldCgl9LAoJewoJCSJpbmRleCI6IDIsCgkJImdyb3VwX25hbWUiOiAieiIsCgkJInJlZ2V4IjogWwoJCQkiei1hdXRvIgoJCV0KCX0sCgl7CgkJImluZGV4IjogMywKCQkiZ3JvdXBfbmFtZSI6ICJib3giLAoJCSJyZWdleCI6IFsKCQkJImJveC1ib3JkZXIiLAoJCQkiYm94LWNvbnRlbnQiCgkJXQoJfQpd'
  STDIN_BASE64: 'PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KCTxtZXRhCgkJY2hhcnNldD0idXRmLTgiPgoJPG1ldGEKCQluYW1lPSJ2aWV3cG9ydCIKCQljb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CjwvaGVhZD4KPGJvZHk+Cgk8ZGl2CgkJY2xhc3M9ImN1c3RvbS1jbGFzcyBob3ZlcjpiZWZvcmU6cHJpbnQ6Y29udGVudC1bJyonXSBob3ZlcjphZnRlcjpwcmludDpjb250ZW50LVsnKiddIGJsb2NrIHNtOmRhcms6bHRyOmJsb2NrIDJ4bDpkYXJrOnJ0bDpibG9jayBtLTIgaG92ZXI6YWN0aXZlOnNtOmRhcms6bS0yIGhvdmVyOmFjdGl2ZToyeGw6ZGFyazptLTIgdGV4dC1yZWQtNTAvNTAiPgoJPC9kaXY+Cgk8ZGl2CgkJY2xhc3M9ImN1c3RvbS1jbGFzcyBiZWZvcmU6W0BzdXBwb3J0cyhiYWNrZHJvcC1maWx0ZXI6Ymx1cigwKSldOlsmOm50aC1jaGlsZCgxKV06dG9wLVs1cHhdIGFmdGVyOltAc3VwcG9ydHMoYmFja2Ryb3AtZmlsdGVyOmJsdXIoMCkpXTpbJjpudGgtY2hpbGQoMSldOnRvcC1bNXB4XSBbQHN1cHBvcnRzKGJhY2tkcm9wLWZpbHRlcjpibHVyKDApKV06WyY6bnRoLWNoaWxkKDEpXTp0b3AtWzVweF0gc206W0BzdXBwb3J0cyhiYWNrZHJvcC1maWx0ZXI6Ymx1cigwKSldOlsmOm50aC1jaGlsZCgxKV06dG9wLVs1cHhdIDJ4bDpbQHN1cHBvcnRzKGJhY2tkcm9wLWZpbHRlcjpibHVyKDApKV06WyY6bnRoLWNoaWxkKDEpXTp0b3AtWzVweF0iPgoJPC9kaXY+Cgk8ZGl2CgkJY2xhc3M9ImN1c3RvbS1jbGFzcyBibG9jayBzbTpibG9jayAyeGw6YmxvY2sgbWluLVs1cHhdOmJsb2NrIG1heC1zbTpibG9jayBtYXgtMnhsOmJsb2NrIG1heC1bNXB4XTpibG9jayBsZzpwZWVyL2lkZW50aWZpZXI6bS0yIHBlZXItWy5pcy1ib29sXTpsZzptLTIgcGVlci1bOm50aC1vZi10eXBlKDEpXyZdOmxnOm0tMiBsZzphcmlhLWNoZWNrZWQ6bS0yIGdyb3VwLWhvdmVyL2lkZW50aWZpZXI6bGc6bS0yIHBlZXItaG92ZXIvaWRlbnRpZmllcjpsZzptLTIgZ3JvdXAtWzpudGgtb2YtdHlwZSgxKV8mXTpsZzptLTIgbGc6Z3JvdXAvaWRlbnRpZmllcjptLTIgZ3JvdXAtWy5pcy1ib29sXTpsZzptLTIgbGc6c3VwcG9ydHMtW2JhY2tkcm9wLWZpbHRlcl06bS0yIGxnOnN1cHBvcnRzLVtkaXNwbGF5OmdyaWRdOm0tMiBsZzpkYXRhLVtzaXplPWxhcmdlXTptLTIgbWF4LVs1cHhdOm1pbi1bNXB4XTpzbTptZDpsZzp4bDoyeGw6bWF4LXNtOm1heC1tZDptYXgtbGc6bWF4LXhsOm1heC0yeGw6dGV4dC1yZWQtNTAvNTAgcGVlci1hcmlhLVtzb3J0PWFzY2VuZGluZ106bGc6YmctW3VybCgnaW1nLnN2ZycpXSBsZzphcmlhLVtzb3J0PWFzY2VuZGluZ106YmctW3VybCgnaW1nLnN2ZycpXSBncm91cC1hcmlhLVtzb3J0PWFzY2VuZGluZ106bGc6YmctW3VybCgnaW1nLnN2ZycpXSI+Cgk8L2Rpdj4KCTxkaXYKCQljbGFzcz0icm91bmRlZC1lZSByb3VuZGVkLXNzIHJvdW5kZWQtZXMgcm91bmRlZC1zIHJvdW5kZWQtZSByb3VuZGVkLXNlIGN1c3RvbS1jbGFzcyBpbnNldC01IHN0YXJ0LTUgZW5kLTUgbGluZS1jbGFtcC0zIHBzLTUgcGUtNSBtcy01IG1lLTUgdGV4dC1sZy81IHRleHQtc20vWzVweF0gbGlzdC1pbWFnZS1bdXJsKCdjYXJyb3QucG5nJyldIHNjcm9sbC1wcy01IHNjcm9sbC1wZS01IHNjcm9sbC1tcy01IHNjcm9sbC1tZS01IGJnLXB1cnBsZS00MDAvMjAgYm9yZGVyLXMtcmVkLTUwMCBib3JkZXItcy01IGJvcmRlci1lLXJlZC01MDAgYm9yZGVyLWUtNSByb3VuZGVkLVs1cHhdIGZyb20tMTAlIGZyb20tWzUuNSVdIHRvLTkwJSB2aWEtMzAlIj4KCTwvZGl2PgoJPGRpdgoJCWNsYXNzPSJAY29udGFpbmVyIEBjb250YWluZXIvbWFpbiBmb3JtLWNoZWNrYm94IGZvcm0taW5wdXQgZm9ybS1yYWRpbyBmb3JtLW11bHRpc2VsZWN0IGZvcm0tc2VsZWN0IGZvcm0tdGV4dGFyZWEgcHJvc2UgcHJvc2UtaW52ZXJ0IG5vdC1wcm9zZSBwcm9zZS1iYXNlIHByb3NlLTJ4bCBwcm9zZS1uZXV0cmFsIHByb3NlLWdyYXkgaG92ZXI6cHJvc2UtaGVhZGluZ3M6cHJvc2UtbGVhZDpwcm9zZS1oMTpwcm9zZS1oMjpwcm9zZS1oMzpwcm9zZS1oNDpwcm9zZS1wOnByb3NlLWE6cHJvc2UtYmxvY2txdW90ZTpwcm9zZS1maWd1cmU6cHJvc2UtZmlnY2FwdGlvbjpwcm9zZS1zdHJvbmc6cHJvc2UtZW06cHJvc2UtY29kZTpwcm9zZS1wcmU6cHJvc2Utb2w6cHJvc2UtdWw6cHJvc2UtbGk6cHJvc2UtdGFibGU6cHJvc2UtdGhlYWQ6cHJvc2UtdHI6cHJvc2UtdGg6cHJvc2UtdGQ6cHJvc2UtaW1nOnByb3NlLXZpZGVvOnByb3NlLWhyOnRvcC1bNXB4XSI+CgkJPGRpdgoJCQljbGFzcz0iaG92ZXI6QHhzOnRvcC1bNXB4XSBob3ZlcjpAeHMvbWFpbjp0b3AtWzVweF0gaG92ZXI6QHNtOnRvcC1bNXB4XSBob3ZlcjpAbWQ6dG9wLVs1cHhdIGhvdmVyOkBsZzp0b3AtWzVweF0gaG92ZXI6QHhsOnRvcC1bNXB4XSBob3ZlcjpAMnhsOnRvcC1bNXB4XSBob3ZlcjpAM3hsOnRvcC1bNXB4XSBob3ZlcjpANHhsOnRvcC1bNXB4XSBob3ZlcjpANXhsOnRvcC1bNXB4XSBob3ZlcjpANnhsOnRvcC1bNXB4XSBob3ZlcjpAN3hsOnRvcC1bNXB4XSBob3ZlcjpAWzFweF06dG9wLVs1cHhdIGhvdmVyOkBbMXB4XS9tYWluOnRvcC1bNXB4XSI+CgkJPC9kaXY+Cgk8L2Rpdj4KCTxkaXYKCQljbGFzcz0iKjpoYXMtWzpkaXNhYmxlZF06c206Zm9yY2VkLWNvbG9yczp0b3AtWzVweF0gaG92ZXI6KjpzbTpmb3JjZWQtY29sb3JzOnRvcC1bNXB4XSBzaXplLWF1dG8gc2l6ZS1maXQgc2l6ZS1mdWxsIG1pbi13LTEyIG1heC13LTEyIGgtZHZoIGgtbHZoIGgtc3ZoIG1pbi1oLWR2aCBtaW4taC1sdmggbWluLWgtc3ZoIG1pbi1oLTEyIG1heC1oLWR2aCBtYXgtaC1sdmggbWF4LWgtc3ZoIG1heC1oLTEyIGdyaWQtcm93cy1zdWJncmlkIGdyaWQtcm93cy05IGdyaWQtY29scy1zdWJncmlkIGdyaWQtY29scy05IHRleHQtYmFsYW5jZSBvcGFjaXR5LTM1IGZvcmNlZC1jb2xvci1hZGp1c3QtYXV0byBmb3JjZWQtY29sb3ItYWRqdXN0LW5vbmUiPgoJPC9kaXY+Cgk8ZGl2CgkJY2xhc3M9IkBjb250YWluZXIvbWFpbiI+CgkJPGRpdgoJCQljbGFzcz0iKio6aGFzLWNoZWNrZWQ6aW4tZm9jdXM6bm90LXN1cHBvcnRzLVtkaXNwbGF5OmdyaWRdOmRhcmsgbnRoLTM6bnRoLWxhc3QtNTpudGgtb2YtdHlwZS00Om50aC1sYXN0LW9mLXR5cGUtNjpzdGF0aWMgbnRoLVsybisxX29mX2xpXTpudGgtbGFzdC1bMm4rMV9vZl9saV06bnRoLW9mLXR5cGUtWzJuKzFfb2ZfbGldOm50aC1sYXN0LW9mLXR5cGUtWzJuKzFfb2ZfbGldOmhpZGRlbiBAM3hzL21haW46QDJ4cy9tYWluOkB4cy9tYWluOkBzbS9tYWluOkBtZC9tYWluOkBsZy9tYWluOkB4bC9tYWluOkAyeGwvbWFpbjpAM3hsL21haW46QDR4bC9tYWluOkA1eGwvbWFpbjpANnhsL21haW46QDd4bC9tYWluOkBbMjAwcHhdOkBbMjAwcHhdL21haW46dy1hdXRvIj4KCQk8L2Rpdj4KCTwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4K'
  REGIONS_BASE64: 'WyJjdXN0b20tY2xhc3MgaG92ZXI6YmVmb3JlOnByaW50OmNvbnRlbnQtWycqJ10gaG92ZXI6YWZ0ZXI6cHJpbnQ6Y29udGVudC1bJyonXSBibG9jayBzbTpkYXJrOmx0cjpibG9jayAyeGw6ZGFyazpydGw6YmxvY2sgbS0yIGhvdmVyOmFjdGl2ZTpzbTpkYXJrOm0tMiBob3ZlcjphY3RpdmU6MnhsOmRhcms6bS0yIHRleHQtcmVkLTUwLzUwIiwiY3VzdG9tLWNsYXNzIGJlZm9yZTpbQHN1cHBvcnRzKGJhY2tkcm9wLWZpbHRlcjpibHVyKDApKV06WyY6bnRoLWNoaWxkKDEpXTp0b3AtWzVweF0gYWZ0ZXI6W0BzdXBwb3J0cyhiYWNrZHJvcC1maWx0ZXI6Ymx1cigwKSldOlsmOm50aC1jaGlsZCgxKV06dG9wLVs1cHhdIFtAc3VwcG9ydHMoYmFja2Ryb3AtZmlsdGVyOmJsdXIoMCkpXTpbJjpudGgtY2hpbGQoMSldOnRvcC1bNXB4XSBzbTpbQHN1cHBvcnRzKGJhY2tkcm9wLWZpbHRlcjpibHVyKDApKV06WyY6bnRoLWNoaWxkKDEpXTp0b3AtWzVweF0gMnhsOltAc3VwcG9ydHMoYmFja2Ryb3AtZmlsdGVyOmJsdXIoMCkpXTpbJjpudGgtY2hpbGQoMSldOnRvcC1bNXB4XSIsImN1c3RvbS1jbGFzcyBibG9jayBzbTpibG9jayAyeGw6YmxvY2sgbWluLVs1cHhdOmJsb2NrIG1heC1zbTpibG9jayBtYXgtMnhsOmJsb2NrIG1heC1bNXB4XTpibG9jayBsZzpwZWVyL2lkZW50aWZpZXI6bS0yIHBlZXItWy5pcy1ib29sXTpsZzptLTIgcGVlci1bOm50aC1vZi10eXBlKDEpXyZdOmxnOm0tMiBsZzphcmlhLWNoZWNrZWQ6bS0yIGdyb3VwLWhvdmVyL2lkZW50aWZpZXI6bGc6bS0yIHBlZXItaG92ZXIvaWRlbnRpZmllcjpsZzptLTIgZ3JvdXAtWzpudGgtb2YtdHlwZSgxKV8mXTpsZzptLTIgbGc6Z3JvdXAvaWRlbnRpZmllcjptLTIgZ3JvdXAtWy5pcy1ib29sXTpsZzptLTIgbGc6c3VwcG9ydHMtW2JhY2tkcm9wLWZpbHRlcl06bS0yIGxnOnN1cHBvcnRzLVtkaXNwbGF5OmdyaWRdOm0tMiBsZzpkYXRhLVtzaXplPWxhcmdlXTptLTIgbWF4LVs1cHhdOm1pbi1bNXB4XTpzbTptZDpsZzp4bDoyeGw6bWF4LXNtOm1heC1tZDptYXgtbGc6bWF4LXhsOm1heC0yeGw6dGV4dC1yZWQtNTAvNTAgcGVlci1hcmlhLVtzb3J0PWFzY2VuZGluZ106bGc6YmctW3VybCgnaW1nLnN2ZycpXSBsZzphcmlhLVtzb3J0PWFzY2VuZGluZ106YmctW3VybCgnaW1nLnN2ZycpXSBncm91cC1hcmlhLVtzb3J0PWFzY2VuZGluZ106bGc6YmctW3VybCgnaW1nLnN2ZycpXSIsInJvdW5kZWQtZWUgcm91bmRlZC1zcyByb3VuZGVkLWVzIHJvdW5kZWQtcyByb3VuZGVkLWUgcm91bmRlZC1zZSBjdXN0b20tY2xhc3MgaW5zZXQtNSBzdGFydC01IGVuZC01IGxpbmUtY2xhbXAtMyBwcy01IHBlLTUgbXMtNSBtZS01IHRleHQtbGcvNSB0ZXh0LXNtL1s1cHhdIGxpc3QtaW1hZ2UtW3VybCgnY2Fycm90LnBuZycpXSBzY3JvbGwtcHMtNSBzY3JvbGwtcGUtNSBzY3JvbGwtbXMtNSBzY3JvbGwtbWUtNSBiZy1wdXJwbGUtNDAwLzIwIGJvcmRlci1zLXJlZC01MDAgYm9yZGVyLXMtNSBib3JkZXItZS1yZWQtNTAwIGJvcmRlci1lLTUgcm91bmRlZC1bNXB4XSBmcm9tLTEwJSBmcm9tLVs1LjUlXSB0by05MCUgdmlhLTMwJSIsIkBjb250YWluZXIgQGNvbnRhaW5lci9tYWluIGZvcm0tY2hlY2tib3ggZm9ybS1pbnB1dCBmb3JtLXJhZGlvIGZvcm0tbXVsdGlzZWxlY3QgZm9ybS1zZWxlY3QgZm9ybS10ZXh0YXJlYSBwcm9zZSBwcm9zZS1pbnZlcnQgbm90LXByb3NlIHByb3NlLWJhc2UgcHJvc2UtMnhsIHByb3NlLW5ldXRyYWwgcHJvc2UtZ3JheSBob3Zlcjpwcm9zZS1oZWFkaW5nczpwcm9zZS1sZWFkOnByb3NlLWgxOnByb3NlLWgyOnByb3NlLWgzOnByb3NlLWg0OnByb3NlLXA6cHJvc2UtYTpwcm9zZS1ibG9ja3F1b3RlOnByb3NlLWZpZ3VyZTpwcm9zZS1maWdjYXB0aW9uOnByb3NlLXN0cm9uZzpwcm9zZS1lbTpwcm9zZS1jb2RlOnByb3NlLXByZTpwcm9zZS1vbDpwcm9zZS11bDpwcm9zZS1saTpwcm9zZS10YWJsZTpwcm9zZS10aGVhZDpwcm9zZS10cjpwcm9zZS10aDpwcm9zZS10ZDpwcm9zZS1pbWc6cHJvc2UtdmlkZW86cHJvc2UtaHI6dG9wLVs1cHhdIiwiaG92ZXI6QHhzOnRvcC1bNXB4XSBob3ZlcjpAeHMvbWFpbjp0b3AtWzVweF0gaG92ZXI6QHNtOnRvcC1bNXB4XSBob3ZlcjpAbWQ6dG9wLVs1cHhdIGhvdmVyOkBsZzp0b3AtWzVweF0gaG92ZXI6QHhsOnRvcC1bNXB4XSBob3ZlcjpAMnhsOnRvcC1bNXB4XSBob3ZlcjpAM3hsOnRvcC1bNXB4XSBob3ZlcjpANHhsOnRvcC1bNXB4XSBob3ZlcjpANXhsOnRvcC1bNXB4XSBob3ZlcjpANnhsOnRvcC1bNXB4XSBob3ZlcjpAN3hsOnRvcC1bNXB4XSBob3ZlcjpAWzFweF06dG9wLVs1cHhdIGhvdmVyOkBbMXB4XS9tYWluOnRvcC1bNXB4XSIsIio6aGFzLVs6ZGlzYWJsZWRdOnNtOmZvcmNlZC1jb2xvcnM6dG9wLVs1cHhdIGhvdmVyOio6c206Zm9yY2VkLWNvbG9yczp0b3AtWzVweF0gc2l6ZS1hdXRvIHNpemUtZml0IHNpemUtZnVsbCBtaW4tdy0xMiBtYXgtdy0xMiBoLWR2aCBoLWx2aCBoLXN2aCBtaW4taC1kdmggbWluLWgtbHZoIG1pbi1oLXN2aCBtaW4taC0xMiBtYXgtaC1kdmggbWF4LWgtbHZoIG1heC1oLXN2aCBtYXgtaC0xMiBncmlkLXJvd3Mtc3ViZ3JpZCBncmlkLXJvd3MtOSBncmlkLWNvbHMtc3ViZ3JpZCBncmlkLWNvbHMtOSB0ZXh0LWJhbGFuY2Ugb3BhY2l0eS0zNSBmb3JjZWQtY29sb3ItYWRqdXN0LWF1dG8gZm9yY2VkLWNvbG9yLWFkanVzdC1ub25lIiwiKio6aGFzLWNoZWNrZWQ6aW4tZm9jdXM6bm90LXN1cHBvcnRzLVtkaXNwbGF5OmdyaWRdOmRhcmsgbnRoLTM6bnRoLWxhc3QtNTpudGgtb2YtdHlwZS00Om50aC1sYXN0LW9mLXR5cGUtNjpzdGF0aWMgbnRoLVsybisxX29mX2xpXTpudGgtbGFzdC1bMm4rMV9vZl9saV06bnRoLW9mLXR5cGUtWzJuKzFfb2ZfbGldOm50aC1sYXN0LW9mLXR5cGUtWzJuKzFfb2ZfbGldOmhpZGRlbiBAM3hzL21haW46QDJ4cy9tYWluOkB4cy9tYWluOkBzbS9tYWluOkBtZC9tYWluOkBsZy9tYWluOkB4bC9tYWluOkAyeGwvbWFpbjpAM3hsL21haW46QDR4bC9tYWluOkA1eGwvbWFpbjpANnhsL21haW46QDd4bC9tYWluOkBbMjAwcHhdOkBbMjAwcHhdL21haW46dy1hdXRvIl0K'

tasks:
  upgrade-go-version:
    desc: task upgrade-go-version
    cmds:
      # - go version | sed -e 's/.*go\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/g' | ( read version; go mod edit -go=${version}; )
      # - echo "go.mod" && cat go.mod | sed -n '3p' | sed -e 's/go \([0-9]\+\.[0-9]\+\.[0-9]\+\)/v\1/g'
      - go mod edit -go=$(sed 's/.*go\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/g' <<< $(go version))
      - echo "go.mod" && cat ./go.mod | sed -n '3p' | sed -e 's/go \([0-9]\+\.[0-9]\+\.[0-9]\+\)/v\1/g'

  tag:
    desc: task tag -- [VERSION]
    cmds:
      # - echo "${1}" | ( read version; echo "${version}" | sed 's/\.[0-9]\+$/\.\*/g' | ( read edited; git tag -a "v${version}" -m "tailwindcss v${edited} support"; ); )
      - git tag -a "v{{.CLI_ARGS}}" -m "tailwindcss v$(sed "s/\.[0-9]\+$/\.\*/g" <<< {{.CLI_ARGS}}) support"

  build:
    desc: task build -- [VERSION]
    cmds:
      - task: clean
      - task: minify-dist/config.json-dist/config.min.json
      - task: minify-dist/order_list.json-dist/order_list.min.json
      - task: build:darwin-arm64
      - task: build:darwin-amd64
      - task: build:linux-arm64
      - task: build:linux-386
      - task: build:linux-amd64
      - task: build:windows-arm64
      - task: build:windows-386
      - task: build:windows-amd64
      - task: build:js-wasm

  build:darwin-arm64:
    desc: task build:darwin-arm64 -- [VERSION]
    cmds:
      - GOOS=darwin  GOARCH=arm64 go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/darwin-arm-64/twcs
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/darwin-arm-64/twcs
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/darwin-arm-64/twcs.gz

  build:darwin-amd64:
    desc: task build:darwin-amd64 -- [VERSION]
    cmds:
      - GOOS=darwin  GOARCH=amd64 go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/darwin-x86-64/twcs
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/darwin-x86-64/twcs
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/darwin-x86-64/twcs.gz

  build:linux-arm64:
    desc: task build:linux-arm64 -- [VERSION]
    cmds:
      - GOOS=linux   GOARCH=arm64 go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-arm-64/twcs
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-arm-64/twcs
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-arm-64/twcs.gz

  build:linux-386:
    desc: task build:linux-386 -- [VERSION]
    cmds:
      - GOOS=linux   GOARCH=386   go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-x86-32/twcs
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-x86-32/twcs
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-x86-32/twcs.gz

  build:linux-amd64:
    desc: task build:linux-amd64 -- [VERSION]
    cmds:
      - GOOS=linux   GOARCH=amd64 go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-x86-64/twcs
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-x86-64/twcs
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/linux-x86-64/twcs.gz

  build:windows-arm64:
    desc: task build:windows-arm64 -- [VERSION]
    cmds:
      - GOOS=windows GOARCH=arm64 go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-arm-64/twcs.exe
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-arm-64/twcs.exe
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-arm-64/twcs.exe.gz

  build:windows-386:
    desc: task build:windows-386 -- [VERSION]
    cmds:
      - GOOS=windows GOARCH=386   go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-x86-32/twcs.exe
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-x86-32/twcs.exe
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-x86-32/twcs.exe.gz

  build:windows-amd64:
    desc: task build:windows-amd64 -- [VERSION]
    cmds:
      - GOOS=windows GOARCH=amd64 go build -o {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-x86-64/twcs.exe
      - gzip --best                           {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-x86-64/twcs.exe
      - chmod 755                             {{.TASKFILE_DIR}}/dist/{{.CLI_ARGS}}/windows-x86-64/twcs.exe.gz

  build:js-wasm:
    desc: task build:js-wasm -- [VERSION]
    cmds:
      - 'sed -i "s/\"version\": \"[0-9]\+.[0-9]\+.[0-9]\"/\"version\": \"{{.CLI_ARGS}}\"/g" package.json'
      - GOOS=js GOARCH=wasm go build -o {{.TASKFILE_DIR}}/dist/twcs.wasm
      - chmod 755                       {{.TASKFILE_DIR}}/dist/twcs.wasm

  clean:
    desc: task clean
    cmds:
      # - git rev-parse --show-toplevel | ( read rootpath; rm -rf $rootpath/dist/*/; rm -rf $rootpath/dist/*.wasm; )
      - rm -rf {{.TASKFILE_DIR}}/dist/*/
      - rm -rf {{.TASKFILE_DIR}}/dist/*.wasm

  minify-*-*:
    desc: task minify-[INPUT_FILE]-[OUTPUT_FILE]
    vars:
      SOURCE: '{{.ROOT_DIR}}/{{index .MATCH 0}}'
      DESTINATION: '{{.ROOT_DIR}}/{{index .MATCH 1}}'
    cmds:
      - cat {{.SOURCE}} | jq -r tostring > {{.DESTINATION}}

  test:
    desc: task test
    cmds:
      - task: test:embedded-config-go
      # - task: test:embedded-config-js
      # - task: test:embedded-config-pnpm
      - task: test:list-command-go
      # - task: test:list-command-js
      # - task: test:list-command-pnpm
      - task: test:file-input-go
      # - task: test:file-input-js
      # - task: test:file-input-pnpm
      - task: test:stdin-input-go
      # - task: test:stdin-input-js
      # - task: test:stdin-input-pnpm
      - task: test:regions-input-go
      # - task: test:regions-input-js
      # - task: test:regions-input-pnpm

  test:embedded-config-go:
    desc: task test:embedded-config-go
    cmds:
      - |
        OUT=$(go run . list --embedded-config --config tests/config-embedded.test.json --base64-output --edited-order)

        if [ "$OUT" = {{.CONFIG_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:embedded-config-js:
    desc: task test:embedded-config-js
    cmds:
      - |
        OUT=$(dist/wasm_exec_node.js list --embedded-config --config tests/config-embedded.test.json --base64-output --edited-order)

        if [ "$OUT" = {{.CONFIG_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:embedded-config-pnpm:
    desc: task test:embedded-config-pnpm
    cmds:
      - |
        cd {{.TASKFILE_DIR}}/tests
        OUT=$(pnpm --silent run twcs list --embedded-config --config config-embedded.test.json --base64-output --edited-order)
        cd {{.TASKFILE_DIR}}

        if [ "$OUT" = {{.CONFIG_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:list-command-go:
    desc: task test:list-command-go
    cmds:
      - |
        OUT=$(go run . list --config tests/config.test.json --base64-output --edited-order)

        if [ "$OUT" = {{.CONFIG_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:list-command-js:
    desc: task test:list-command-js
    cmds:
      - |
        OUT=$(dist/wasm_exec_node.js list --config tests/config.test.json --base64-output --edited-order)

        if [ "$OUT" = {{.CONFIG_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:list-command-pnpm:
    desc: task test:list-command-pnpm
    cmds:
      - |
        cd {{.TASKFILE_DIR}}/tests
        OUT=$(pnpm --silent run twcs list --embedded-config --config config-embedded.test.json --base64-output --edited-order)
        cd {{.TASKFILE_DIR}}

        if [ "$OUT" = {{.CONFIG_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:file-input-go:
    desc: task test:file-input-go
    cmds:
      - |
        HTML=('tests/a/a.html' 'tests/b/b.html' 'tests/c/c.html')
        OUT=''

        go run . format tests/{a,b,c}/*.html

        for (( i=0; i < "${#HTML[@]}"; i++ )); do
          if cmp -s "${HTML[$i]}" tests/test-html.after.txt; then
           [ -z "$OUT" ] \
           && OUT="${HTML[$i]} \u2714" \
           || OUT="$OUT ${HTML[$i]} \u2714"
          else
            [ -z "$OUT" ] \
            && OUT="${HTML[$i]} \u2716" \
            || OUT="$OUT ${HTML[$i]} \u2716"
          fi

          yes | cp -rf tests/test-html.before.txt "${HTML[$i]}"
        done

        echo -e "{{.TASK}} - $OUT"

  test:file-input-js:
    desc: task test:file-input-js
    cmds:
      - |
        HTML=('tests/a/a.html' 'tests/b/b.html' 'tests/c/c.html')
        OUT=''

        dist/wasm_exec_node.js format tests/{a,b,c}/*.html

        for (( i=0; i < "${#HTML[@]}"; i++ )); do
          if cmp -s "${HTML[$i]}" tests/test-html.after.txt; then
           [ -z "$OUT" ] \
           && OUT="${HTML[$i]} \u2714" \
           || OUT="$OUT ${HTML[$i]} \u2714"
          else
            [ -z "$OUT" ] \
            && OUT="${HTML[$i]} \u2716" \
            || OUT="$OUT ${HTML[$i]} \u2716"
          fi

          yes | cp -rf tests/test-html.before.txt "${HTML[$i]}"
        done

        echo -e "{{.TASK}} - $OUT"

  test:file-input-pnpm:
    desc: task test:file-input-pnpm
    cmds:
      - |
        HTML=('tests/a/a.html' 'tests/b/b.html' 'tests/c/c.html')
        OUT=''

        cd {{.TASKFILE_DIR}}/tests
        pnpm --silent run twcs format {a,b,c}/*.html
        cd {{.TASKFILE_DIR}}

        for (( i=0; i < "${#HTML[@]}"; i++ )); do
          if cmp -s "${HTML[$i]}" tests/test-html.after.txt; then
           [ -z "$OUT" ] \
           && OUT="${HTML[$i]} \u2714" \
           || OUT="$OUT ${HTML[$i]} \u2714"
          else
            [ -z "$OUT" ] \
            && OUT="${HTML[$i]} \u2716" \
            || OUT="$OUT ${HTML[$i]} \u2716"
          fi

          yes | cp -rf tests/test-html.before.txt "${HTML[$i]}"
        done

        echo -e "{{.TASK}} - $OUT"

  test:stdin-input-go:
    desc: task test:stdin-input-go
    cmds:
      - |
        IN=$(base64 -w 0 tests/test-html.before.txt)
        OUT=$(go run . format --code-ext html --code $IN)

        if [ "$OUT" = {{.STDIN_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:stdin-input-js:
    desc: Expects error; See summary
    summary: |
      Error: total length of command line and environment variables exceeds limit
    cmds:
      - |
        IN=$(base64 -w 0 tests/test-html.before.txt)
        OUT=$(dist/wasm_exec_node.js format --code-ext html --code $IN)

        if [ "$OUT" = {{.STDIN_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:stdin-input-pnpm:
    desc: Expects error; See summary
    summary: |
      Error: total length of command line and environment variables exceeds limit
    cmds:
      - |
        IN=$(base64 -w 0 tests/test-html.before.txt)

        cd {{.TASKFILE_DIR}}/tests
        OUT=$(pnpm --silent run twcs format --code-ext html --code $IN)
        cd {{.TASKFILE_DIR}}

        if [ "$OUT" = {{.STDIN_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:regions-input-go:
    desc: task test:regions-input-go
    cmds:
      - |
        IN=$(base64 -w 0 tests/test-regions.json)
        OUT=$(go run . format --region-input --code-ext html --code $IN)

        if [ "$OUT" = {{.REGIONS_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:regions-input-js:
    desc: Expects error; See summary
    summary: |
      Error: total length of command line and environment variables exceeds limit
    cmds:
      - |
        IN=$(base64 -w 0 tests/test-regions.json)
        OUT=$(dist/wasm_exec_node.js format --region-input --code-ext html --code $IN)

        if [ "$OUT" = {{.REGIONS_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi

  test:regions-input-pnpm:
    desc: Expects error; See summary
    summary: |
      Error: total length of command line and environment variables exceeds limit
    cmds:
      - |
        IN=$(base64 -w 0 tests/test-regions.json)

        cd {{.TASKFILE_DIR}}/tests
        OUT=$(pnpm --silent run twcs format --region-input --code-ext html --code $IN)
        cd {{.TASKFILE_DIR}}

        if [ "$OUT" = {{.REGIONS_BASE64}} ]; then
          echo -e "{{.TASK}} \u2714"
        else
          echo -e "{{.TASK}} \u2716"
        fi
